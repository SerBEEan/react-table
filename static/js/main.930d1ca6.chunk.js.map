{"version":3,"sources":["components/Loader/index.js","components/TableHead/index.js","components/TableBody/index.js","components/TableFooter/index.js","components/Table/index.js","components/SelectedStr/index.js","components/SearchForm/index.js","components/AddForm/index.js","components/SectionData/index.js","App.js","index.js"],"names":["Loader","className","TableHead","props","nameColSort","modeSort","handleClickSort","inputData","tableFields","map","title","onClick","bind","TableBody","strings","handleChooseStr","useState","lastNodeStr","setLastNodeStr","clickStr","event","nodeStr","target","parentElement","classList","remove","add","dataset","json","str","data-json","JSON","stringify","id","firstName","lastName","email","phone","TableFooter","currentPage","countPages","countSrings","handleChangeCurrPage","colSpan","Array","fill","_","index","Table","data","setCurrentPage","currentStrings","slice","length","Math","ceil","border","cellPadding","SelectedStr","dataStr","result","parse","disabled","rows","cols","value","description","address","streetAddress","city","state","zip","getSelectBlock","SearchForm","handleChangeValue","valueInput","setValueInput","useEffect","type","onChange","AddForm","handlePushInData","isOpenForm","setIsOpenForm","isSuccess","inputId","setInputId","inputFirstName","setInputFirstName","inputLastName","setInputLastName","inputEmail","setInputEmail","inputPhone","setInputPhone","changeInput","field","inputValue","testingField","regexp","setter","match","getStateInput","addInputs","input","name","elem","Number","parseInt","concat","SectionData","arr","linkData","setData","setDataStr","searchingValue","setSearchingValue","setNameColSort","setModeSort","sorting","col","tmpArr","sort","a","b","axios","get","then","res","catch","errMessage","console","error","newData","filter","i","toString","includes","nameCol","reverse","App","setLinkData","chooseLinkData","small","large","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.930d1ca6.chunk.js","sourcesContent":["import './styles.css';\n\nfunction Loader() {\n  return <div className=\"loader\"></div>\n}\n\nexport default Loader;\n","import inputData from '../../input.json'\n\nimport './styles.css'\n\nexport default function TableHead(props) {\n  const { nameColSort, modeSort, handleClickSort } = props\n\n  return (\n    <thead>\n      <tr>\n        { inputData.tableFields.map((title) => (\n          <th\n            key={ title }\n            className={\n                nameColSort === title ?\n                  (modeSort === 'up' ? 'sortUp' : 'sortDown')\n                : \"\"\n            }\n            onClick={ handleClickSort.bind(null, title) }\n          >\n            { title }\n          </th>\n        )) }\n      </tr>\n    </thead>\n  )\n}\n","import { useState } from 'react'\n\nimport './styles.css'\n\nexport default function TableBody(props) {\n  const { strings, handleChooseStr } = props\n\n  const [lastNodeStr, setLastNodeStr] = useState(null)\n\n  function clickStr(event) {\n    const nodeStr = event.target.parentElement\n\n    lastNodeStr !== null && lastNodeStr.classList.remove('active')\n    nodeStr.classList.add('active')\n    setLastNodeStr(nodeStr)\n\n    handleChooseStr(nodeStr.dataset.json)\n  }\n\n  return (\n    <tbody>\n      {strings.map((str) => (\n        <tr key={ str.id + str.phone } onClick={ clickStr } data-json={ JSON.stringify(str) }>\n          <td>{ str.id }</td>\n          <td>{ str.firstName }</td>\n          <td>{ str.lastName }</td>\n          <td>{ str.email }</td>\n          <td>{ str.phone }</td>\n        </tr>\n      ))}\n    </tbody>\n  )\n}\n","import './styles.css'\n\nexport default function TableFooter(props) {\n  const {currentPage, countPages, countSrings, handleChangeCurrPage} = props\n\n\n  return (\n    <tfoot>\n      <tr>\n        <td colSpan=\"5\">\n          <div className=\"tfootContent\">\n            <div>\n              {\n                countSrings !== 0 ?\n                  `${ (currentPage-1)*50 + 1 } - ${ (currentPage-1)*50 + countSrings }`\n                :\n                  '0'\n              }\n            </div>\n            {\n              countPages > 1 &&\n                <div className=\"buttons\">\n                  { Array(countPages).fill(0).map((_, index) => {\n                    return (\n                      <button\n                        key={ index+1 }\n                        className={ index+1 === currentPage ? \"actionButton\" : \"\" }\n                        onClick={ handleChangeCurrPage.bind(null, index+1) }\n                      >\n                        { index+1 }\n                      </button>\n                    )\n                  }) }\n                </div>\n            }\n          </div>\n        </td>\n      </tr>\n    </tfoot>\n  )\n}\n","import { useState } from 'react'\n\nimport TableHead from '../TableHead'\nimport TableBody from '../TableBody'\nimport TableFooter from '../TableFooter'\n\nimport './styles.css'\n\nexport default function Table(props) {\n  let { data, handleChooseStr, handleClickSort, modeSort, nameColSort } = props\n\n  // Для перехода по страницам\n  const [currentPage, setCurrentPage] = useState(1)\n\n  const currentStrings = data.slice( (currentPage-1)*50, currentPage*50 )\n  const countSrings = currentStrings.length\n  const countPages = Math.ceil(data.length / 50)\n\n\n  return (\n    <table border=\"1\" cellPadding=\"15\">\n      <TableHead\n        nameColSort={ nameColSort }\n        modeSort={ modeSort }\n        handleClickSort={ handleClickSort }\n      />\n      <TableBody strings={ currentStrings } handleChooseStr={ handleChooseStr } />\n      <TableFooter\n        countSrings={ countSrings }\n        currentPage={ currentPage }\n        countPages={ countPages }\n        handleChangeCurrPage={ setCurrentPage }\n      />\n    </table>\n  )\n}\n","import './styles.css'\n\nexport default function SelectedStr(props) {\n  const { dataStr } = props\n\n  function getSelectBlock() {\n    let result = null\n\n    if (dataStr !== null) {\n      const str = JSON.parse(dataStr)\n\n      result = (\n        <div className=\"selectBlock\">\n          <div>Выбран пользователь: <b>{ str.firstName } { str.lastName }</b></div>\n          <div>Описание: <textarea disabled rows=\"5\" cols=\"90\" value={ str.description }></textarea></div>\n          <div>Адрес проживания: <b>{ str.address.streetAddress }</b></div>\n          <div>Город: <b>{ str.address.city }</b></div>\n          <div>Провинция: <b>{ str.address.state }</b></div>\n          <div>Индекс: <b>{ str.address.zip }</b></div>\n        </div>\n      )\n    }\n\n    return result\n  }\n\n\n  return getSelectBlock()\n}\n","import { useState, useEffect } from 'react'\n\nimport './styles.css'\n\nexport default function SearchForm(props) {\n  const { handleChangeValue } = props\n\n  const [valueInput, setValueInput] = useState('')\n\n  function inputOnChange(event) {\n    setValueInput(event.target.value)\n  }\n\n  useEffect(() => {\n    handleChangeValue(valueInput) // eslint-disable-next-line\n  }, [valueInput])\n\n  return (\n    <div className=\"searchForm\">\n      <input type=\"text\" value={ valueInput } onChange={ inputOnChange } />\n      <button onClick={ handleChangeValue.bind(null, valueInput) }>Найти</button>\n    </div>\n  )\n}\n","import { useState } from 'react'\n\nimport './styles.css'\n\nimport inputData from '../../input.json'\n\nexport default function AddForm(props) {\n  const { data, handlePushInData } = props\n\n  const [isOpenForm, setIsOpenForm] = useState(false)\n\n  // Текстовые поля\n  const [inputId, setInputId]                 = useState({ value: '', isSuccess: null })\n  const [inputFirstName, setInputFirstName]   = useState({ value: '', isSuccess: null })\n  const [inputLastName, setInputLastName]     = useState({ value: '', isSuccess: null })\n  const [inputEmail, setInputEmail]           = useState({ value: '', isSuccess: null })\n  const [inputPhone, setInputPhone]           = useState({ value: '', isSuccess: null })\n\n  function changeInput(field, event) {\n    const inputValue = event.target.value\n    let regexp = null\n\n    switch (field) {\n      case 'id':\n        regexp = /^\\d+$/\n        testingField(regexp, inputValue, setInputId)\n        break;\n\n      case 'firstName':\n        regexp = /^[A-Za-z]+$/\n        testingField(regexp, inputValue, setInputFirstName)\n        break;\n\n      case 'lastName':\n        regexp = /^[A-Za-z]+$/\n        testingField(regexp, inputValue, setInputLastName)\n        break;\n\n      case 'email':\n        regexp = /^([A-Za-z0-9_-]+\\.)*[A-Za-z0-9_-]+@[a-z0-9_-]+(\\.[a-z0-9_-]+)*\\.[a-z]{2,6}$/\n        testingField(regexp, inputValue, setInputEmail)\n        break;\n\n      case 'phone':\n        regexp = /^\\((\\d{3})\\)(\\d{3})[-](\\d{4})$/\n        testingField(regexp, inputValue, setInputPhone)\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  function testingField(regexp, inputValue, setter) {\n    const matches = inputValue.match(regexp)\n\n    if (matches !== null) {\n      setter({ value: inputValue, isSuccess: true })\n    }\n    else {\n      if (inputValue === '')\n        setter({ value: inputValue, isSuccess: null })\n      else\n        setter({ value: inputValue, isSuccess: false })\n    }\n  }\n\n  function getStateInput(title) {\n    if (title === 'id') return inputId\n    else if (title === 'firstName') return inputFirstName\n    else if (title === 'lastName') return inputLastName\n    else if (title === 'email') return inputEmail\n    else if (title === 'phone') return inputPhone\n  }\n\n  function clickButtonOpen() {\n    if (isOpenForm) {                                     // Если форма уже открыта (кнопка нажата не первый раз)\n\n      // Добавление\n      if (inputId.isSuccess && inputFirstName.isSuccess && inputLastName.isSuccess && inputEmail.isSuccess && inputPhone.isSuccess) {\n        let elem = {\n          id: Number.parseInt(inputId.value),\n          firstName: inputFirstName.value,\n          lastName: inputLastName.value,\n          email: inputEmail.value,\n          phone: inputPhone.value,\n          address: {\n            city: \"some city\",\n            state: \"some state\",\n            streetAddress: \"some streetAddress\",\n            zip: \"some zip\"\n          },\n          description: \"some description\"\n        }\n\n        handlePushInData(data.concat(elem))\n\n        // Обнуление\n        setInputId({ value: '', isSuccess: null })\n        setInputFirstName({ value: '', isSuccess: null })\n        setInputLastName({ value: '', isSuccess: null })\n        setInputEmail({ value: '', isSuccess: null })\n        setInputPhone({ value: '', isSuccess: null })\n        setIsOpenForm(false)\n      }\n      else {\n        // Выделить пустые поля\n        !inputId.isSuccess && setInputId({ ...inputId , isSuccess: false })\n        !inputFirstName.isSuccess && setInputFirstName({ ...inputFirstName, isSuccess: false })\n        !inputLastName.isSuccess && setInputLastName({ ...inputLastName, isSuccess: false })\n        !inputEmail.isSuccess && setInputEmail({ ...inputEmail, isSuccess: false })\n        !inputPhone.isSuccess && setInputPhone({ ...inputPhone, isSuccess: false })\n      }\n\n\n    }\n    else {                                                // Если кнопка нажата первый раз\n      setIsOpenForm(true)\n    }\n  }\n\n\n  return (\n    <div className=\"formAdd\">\n      { isOpenForm &&\n        <div>\n        {\n          inputData.addInputs.map((input, index) => (\n            <label key={ input.title + index }>{ `${ input.title }: ` }\n              <input\n                type={ input.type }\n                name={ input.title }\n                value={ getStateInput(input.title).value }\n                onChange={ changeInput.bind(null, input.title) }\n                className={\n                  getStateInput(input.title).isSuccess === null ?\n                    \"\"\n                  :\n                    getStateInput(input.title).isSuccess ? \"success\" : \"fail\"\n                }\n              />\n            </label>\n          ))\n        }\n        </div>\n      }\n      <button onClick={ clickButtonOpen }>Добавить</button>\n      {isOpenForm &&\n          <button onClick={ () => { setIsOpenForm(false) } }>Закрыть</button>\n      }\n    </div>\n  )\n}\n","import { useState, useEffect } from 'react'\nimport axios from 'axios'\n\nimport Loader from '../Loader'\nimport Table from '../Table'\nimport SelectedStr from '../SelectedStr'\nimport SearchForm from '../SearchForm'\nimport AddForm from '../AddForm'\n\nimport inputData from '../../input.json'\n\nimport './styles.css'\n\nexport default function SectionData(props) {\n  const { linkData } = props\n\n  // Для приема данных\n  const [data, setData] = useState([])                          // Массив данных\n\n  // Для выбора строки\n  const [dataStr, setDataStr] = useState(null)                  // Выбранная строка\n\n  // Для поиска\n  const [searchingValue, setSearchingValue] = useState('')      // Искомое значение (из формы поиска)\n\n  // Для сортировки\n  const [nameColSort, setNameColSort] = useState('id')\n  const [modeSort, setModeSort] = useState('down')\n\n  useEffect(() => {\n    axios\n      .get(linkData)\n      .then((res) => res.data)\n      .then((res) => {\n        setData( res.sort( (a, b) => a.id-b.id ) )\n      })\n      .catch(errMessage => console.error(errMessage))\n  }, [linkData])\n\n  function filterData(arr) {                                    // Фильтрует\n    let tmpArr = arr.filter((str) => {\n      for (let i = 0; i < inputData.tableFields.length; i++) {\n        let result = str[ inputData.tableFields[i] ].toString().includes(searchingValue)\n\n        if(!result)\n          continue;\n\n        return result\n      }\n      return false\n    })\n\n    return tmpArr\n  }\n\n  function handlePushInData(newData) {\n    setData( sorting(newData, nameColSort) )\n  }\n\n  function handleClickSort(nameCol) {\n    if (nameCol === nameColSort){                                   // Если сортируется тот же столбец\n      modeSort === 'up' ? setModeSort('down') : setModeSort('up')\n      data.reverse()\n    }\n    else {                                                          // Если сортируется новый столбец\n      setNameColSort(nameCol)\n      setModeSort('down')\n      setData( sorting(data, nameCol) )\n    }\n  }\n\n  function sorting(arr, col) {\n    const tmpArr = arr\n\n    if (col === 'id') {\n      tmpArr.sort((a,b) => {\n        return a.id-b.id\n      })\n    }\n    else {\n      tmpArr.sort((a, b) => {\n        if (a[col] > b[col]) {\n          return 1;\n        }\n        if (a[col] < b[col]) {\n          return -1;\n        }\n        return 0;\n      })\n    }\n\n    return tmpArr\n  }\n\n\n  return (\n    <div className=\"container\">\n      {\n        !data.length ?\n          <Loader />\n        :\n          <>\n            <AddForm data={ data } handlePushInData={ handlePushInData } />\n            <SearchForm handleChangeValue={ setSearchingValue } />\n            <Table\n              data={ filterData(data) }\n              handleChooseStr={ setDataStr }\n              handleClickSort={ handleClickSort }\n              modeSort={ modeSort }\n              nameColSort={ nameColSort }\n            />\n            <SelectedStr dataStr={ dataStr } />\n          </>\n      }\n    </div>\n  )\n}\n","import { useState } from 'react'\n\nimport './App.css'\n\nimport SectionData from './components/SectionData'\nimport inputData from './input.json'\n\nfunction App() {\n  const [linkData, setLinkData] = useState('')\n\n  function chooseLinkData(linkData) {\n    setLinkData(linkData)\n  }\n\n  return (\n    <div className=\"App\">\n      {\n        !linkData ?\n          <>\n            <p>Выберите набор данных</p>\n            <div>\n              <button onClick={ chooseLinkData.bind(null, inputData.linkData.small) }>Маленький</button>\n              <button onClick={ chooseLinkData.bind(null, inputData.linkData.large) }>Большой</button>\n            </div>\n          </>\n        :\n          <SectionData linkData={ linkData }/>\n      }\n\n    </div>\n  );\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}